# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_typed/array_initialized.c (with preprocessing)
tests/wp_typed/array_initialized.c:13:[kernel] warning: Too many initializers for array g
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function main1
------------------------------------------------------------

Goal Assertion (file tests/wp_typed/array_initialized.c, line 71):
Let a_0 = (shift_A500_sint32 (global K_g_67) 0).
Let a_1 = (shift_A500_sint32 (global K_h1_71) 0).
Let a_2 = (shift_A500_sint32 (global K_h2_72) 0).
Assume {
  (* Goal *)
  When: (0<=i_0) /\ (i_0<=499).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_2 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_2 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_2 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_2 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_2 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_2 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_2 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_2 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_2 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_2 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_2 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_2 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_2 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_2 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_2 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_2 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_2 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_2 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_2 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_2 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_2 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_2 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_2 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_2 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_2 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_2 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_2 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_2 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_2 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_2 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_2 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_2 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_2 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_2 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_2 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_2 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_2 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_2 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_2 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_2 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_2 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_2 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_2 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_2 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_2 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_2 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_2 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_2 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_2 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_2 49)].
  (* Initializer *)
  Init: forall i_1:int.
        (50<=i_1) -> (i_1<=499) -> (0=Mint_0[(shift_sint32 a_2 i_1)]).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_1 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_1 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_1 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_1 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_1 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_1 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_1 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_1 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_1 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_1 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_1 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_1 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_1 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_1 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_1 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_1 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_1 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_1 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_1 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_1 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_1 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_1 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_1 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_1 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_1 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_1 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_1 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_1 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_1 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_1 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_1 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_1 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_1 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_1 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_1 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_1 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_1 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_1 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_1 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_1 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_1 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_1 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_1 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_1 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_1 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_1 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_1 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_1 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_1 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_1 49)].
  (* Initializer *)
  Init: forall i_1:int.
        (50<=i_1) -> (i_1<=499) -> (0=Mint_0[(shift_sint32 a_1 i_1)]).
  (* Initializer *)
  Init: forall i_1:int.
        (0<=i_1) -> (i_1<=499) -> (0=Mint_0[(shift_sint32 a_0 i_1)]).
}
Prove: 0=Mint_0[(shift_sint32 a_0 i_0)].

------------------------------------------------------------
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Assertion (file tests/wp_typed/array_initialized.c, line 185):
Let a_0 = (shift_A500_sint32 (global K_h1_71) 0).
Let a_1 = (shift_A500_sint32 (global K_h2_72) 0).
Assume {
  (* Goal *)
  When: (0<=i_0) /\ (i_0<=499).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_1 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_1 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_1 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_1 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_1 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_1 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_1 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_1 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_1 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_1 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_1 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_1 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_1 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_1 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_1 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_1 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_1 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_1 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_1 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_1 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_1 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_1 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_1 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_1 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_1 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_1 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_1 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_1 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_1 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_1 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_1 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_1 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_1 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_1 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_1 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_1 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_1 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_1 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_1 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_1 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_1 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_1 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_1 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_1 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_1 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_1 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_1 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_1 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_1 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_1 49)].
  (* Initializer *)
  Init: forall i_1:int.
        (50<=i_1) -> (i_1<=499) -> (0=Mint_0[(shift_sint32 a_1 i_1)]).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_0 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_0 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_0 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_0 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_0 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_0 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_0 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_0 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_0 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_0 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_0 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_0 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_0 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_0 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_0 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_0 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_0 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_0 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_0 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_0 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_0 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_0 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_0 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_0 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_0 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_0 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_0 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_0 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_0 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_0 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_0 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_0 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_0 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_0 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_0 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_0 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_0 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_0 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_0 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_0 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_0 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_0 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_0 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_0 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_0 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_0 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_0 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_0 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_0 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_0 49)].
  (* Initializer *)
  Init: forall i_1:int.
        (50<=i_1) -> (i_1<=499) -> (0=Mint_0[(shift_sint32 a_0 i_1)]).
  (* Initializer *)
  Init: forall i_1:int.
        (0<=i_1) -> (i_1<=499)
        -> (0=
            Mint_0[(shift_sint32 (shift_A500_sint32 (global K_g_67) 0) i_1)]).
}
Prove: Mint_0[(shift_sint32 a_0 i_0)]=Mint_0[(shift_sint32 a_1 i_0)].

------------------------------------------------------------
------------------------------------------------------------
  Function main3
------------------------------------------------------------

Goal Assertion (file tests/wp_typed/array_initialized.c, line 194):
Let a_0 = (shift_A500_sint32 (global K_h1_71) 0).
Let a_1 = (shift_A500_sint32 (global K_h2_72) 0).
Assume {
  (* Domain *)
  Type: (is_sint32 Mint_0[(shift_sint32 a_0 50)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 51)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 52)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 53)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 54)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 55)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 56)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 57)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 58)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 59)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 60)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 61)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 62)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 63)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 64)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 65)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 66)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 67)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 68)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 69)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 70)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 71)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 72)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 73)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 74)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 75)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 76)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 77)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 78)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 79)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 80)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 81)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 82)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 83)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 84)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 85)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 86)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 87)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 88)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 89)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 90)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 91)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 92)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 93)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 94)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 95)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 96)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 97)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 98)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 99)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 150)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 151)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 152)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 153)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 154)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 155)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 156)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 157)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 158)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 159)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 160)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 161)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 162)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 163)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 164)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 165)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 166)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 167)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 168)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 169)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 170)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 171)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 172)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 173)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 174)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 175)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 176)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 177)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 178)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 179)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 180)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 181)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 182)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 183)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 184)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 185)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 186)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 187)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 188)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 189)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 190)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 191)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 192)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 193)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 194)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 195)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 196)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 197)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 198)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 199)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 250)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 251)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 252)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 253)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 254)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 255)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 256)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 257)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 258)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 259)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 260)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 261)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 262)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 263)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 264)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 265)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 266)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 267)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 268)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 269)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 270)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 271)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 272)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 273)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 274)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 275)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 276)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 277)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 278)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 279)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 280)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 281)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 282)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 283)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 284)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 285)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 286)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 287)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 288)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 289)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 290)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 291)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 292)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 293)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 294)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 295)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 296)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 297)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 298)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 299)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 350)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 351)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 352)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 353)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 354)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 355)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 356)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 357)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 358)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 359)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 360)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 361)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 362)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 363)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 364)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 365)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 366)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 367)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 368)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 369)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 370)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 371)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 372)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 373)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 374)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 375)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 376)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 377)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 378)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 379)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 380)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 381)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 382)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 383)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 384)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 385)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 386)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 387)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 388)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 389)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 390)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 391)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 392)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 393)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 394)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 395)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 396)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 397)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 398)])
        /\ (is_sint32 Mint_0[(shift_sint32 a_0 399)]).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_1 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_1 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_1 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_1 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_1 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_1 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_1 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_1 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_1 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_1 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_1 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_1 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_1 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_1 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_1 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_1 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_1 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_1 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_1 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_1 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_1 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_1 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_1 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_1 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_1 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_1 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_1 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_1 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_1 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_1 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_1 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_1 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_1 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_1 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_1 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_1 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_1 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_1 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_1 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_1 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_1 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_1 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_1 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_1 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_1 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_1 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_1 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_1 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_1 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_1 49)].
  (* Initializer *)
  Init: forall i_0:int.
        (50<=i_0) -> (i_0<=499) -> (0=Mint_0[(shift_sint32 a_1 i_0)]).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_0 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_0 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_0 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_0 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_0 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_0 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_0 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_0 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_0 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_0 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_0 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_0 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_0 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_0 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_0 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_0 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_0 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_0 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_0 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_0 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_0 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_0 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_0 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_0 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_0 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_0 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_0 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_0 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_0 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_0 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_0 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_0 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_0 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_0 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_0 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_0 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_0 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_0 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_0 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_0 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_0 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_0 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_0 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_0 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_0 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_0 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_0 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_0 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_0 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_0 49)].
  (* Initializer *)
  Init: forall i_0:int.
        (50<=i_0) -> (i_0<=499) -> (0=Mint_0[(shift_sint32 a_0 i_0)]).
  (* Initializer *)
  Init: forall i_0:int.
        (0<=i_0) -> (i_0<=499)
        -> (0=
            Mint_0[(shift_sint32 (shift_A500_sint32 (global K_g_67) 0) i_0)]).
}
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function main_pointer
------------------------------------------------------------

Goal Assertion (file tests/wp_typed/array_initialized.c, line 283):
Let a_0 = (shift_A500_PTR (global K_p_79) 0).
Assume {
  (* Goal *)
  When: (0<=i_0) /\ (i_0<=499).
  (* Initializer *)
  Init: forall i_1:int.
        (0<=i_1) -> (i_1<=499)
        -> ((shift_sint32 (global G_p0_78) 0)=Mptr_0[(shift_PTR a_0 i_1)]).
  (* Heap *)
  Have: (framed Mptr_0) /\ (linked Malloc_0).
}
Prove: (valid_rw Malloc_0 Mptr_0[(shift_PTR a_0 i_0)] 1).

------------------------------------------------------------
------------------------------------------------------------
  Function simpl
------------------------------------------------------------

Goal Post-condition (file tests/wp_typed/array_initialized.c, line 288) in 'simpl':
Let x_0 = Mint_0[(shift_sint32 t_0 0)].
Let a_0 = (shift_A500_sint32 (global K_h1_71) 0).
Let a_1 = (shift_A500_sint32 (global K_h2_72) 0).
Assume {
  (* Domain *)
  Type: (is_sint32 x_0).
  (* Goal *)
  When: (0<=i_1) /\ (i_1<=49).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_1 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_1 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_1 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_1 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_1 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_1 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_1 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_1 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_1 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_1 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_1 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_1 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_1 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_1 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_1 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_1 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_1 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_1 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_1 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_1 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_1 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_1 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_1 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_1 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_1 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_1 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_1 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_1 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_1 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_1 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_1 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_1 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_1 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_1 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_1 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_1 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_1 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_1 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_1 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_1 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_1 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_1 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_1 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_1 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_1 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_1 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_1 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_1 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_1 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_1 49)].
  (* Initializer *)
  Init: forall i_0:int.
        (50<=i_0) -> (i_0<=499) -> (0=Mint_0[(shift_sint32 a_1 i_0)]).
  (* Initializer *)
  Init: 0=Mint_0[(shift_sint32 a_0 0)].
  (* Initializer *)
  Init: 1=Mint_0[(shift_sint32 a_0 1)].
  (* Initializer *)
  Init: 2=Mint_0[(shift_sint32 a_0 2)].
  (* Initializer *)
  Init: 3=Mint_0[(shift_sint32 a_0 3)].
  (* Initializer *)
  Init: 4=Mint_0[(shift_sint32 a_0 4)].
  (* Initializer *)
  Init: 5=Mint_0[(shift_sint32 a_0 5)].
  (* Initializer *)
  Init: 6=Mint_0[(shift_sint32 a_0 6)].
  (* Initializer *)
  Init: 7=Mint_0[(shift_sint32 a_0 7)].
  (* Initializer *)
  Init: 8=Mint_0[(shift_sint32 a_0 8)].
  (* Initializer *)
  Init: 9=Mint_0[(shift_sint32 a_0 9)].
  (* Initializer *)
  Init: 10=Mint_0[(shift_sint32 a_0 10)].
  (* Initializer *)
  Init: 11=Mint_0[(shift_sint32 a_0 11)].
  (* Initializer *)
  Init: 12=Mint_0[(shift_sint32 a_0 12)].
  (* Initializer *)
  Init: 13=Mint_0[(shift_sint32 a_0 13)].
  (* Initializer *)
  Init: 14=Mint_0[(shift_sint32 a_0 14)].
  (* Initializer *)
  Init: 15=Mint_0[(shift_sint32 a_0 15)].
  (* Initializer *)
  Init: 16=Mint_0[(shift_sint32 a_0 16)].
  (* Initializer *)
  Init: 17=Mint_0[(shift_sint32 a_0 17)].
  (* Initializer *)
  Init: 18=Mint_0[(shift_sint32 a_0 18)].
  (* Initializer *)
  Init: 19=Mint_0[(shift_sint32 a_0 19)].
  (* Initializer *)
  Init: 20=Mint_0[(shift_sint32 a_0 20)].
  (* Initializer *)
  Init: 21=Mint_0[(shift_sint32 a_0 21)].
  (* Initializer *)
  Init: 22=Mint_0[(shift_sint32 a_0 22)].
  (* Initializer *)
  Init: 23=Mint_0[(shift_sint32 a_0 23)].
  (* Initializer *)
  Init: 24=Mint_0[(shift_sint32 a_0 24)].
  (* Initializer *)
  Init: 25=Mint_0[(shift_sint32 a_0 25)].
  (* Initializer *)
  Init: 26=Mint_0[(shift_sint32 a_0 26)].
  (* Initializer *)
  Init: 27=Mint_0[(shift_sint32 a_0 27)].
  (* Initializer *)
  Init: 28=Mint_0[(shift_sint32 a_0 28)].
  (* Initializer *)
  Init: 29=Mint_0[(shift_sint32 a_0 29)].
  (* Initializer *)
  Init: 30=Mint_0[(shift_sint32 a_0 30)].
  (* Initializer *)
  Init: 31=Mint_0[(shift_sint32 a_0 31)].
  (* Initializer *)
  Init: 32=Mint_0[(shift_sint32 a_0 32)].
  (* Initializer *)
  Init: 33=Mint_0[(shift_sint32 a_0 33)].
  (* Initializer *)
  Init: 34=Mint_0[(shift_sint32 a_0 34)].
  (* Initializer *)
  Init: 35=Mint_0[(shift_sint32 a_0 35)].
  (* Initializer *)
  Init: 36=Mint_0[(shift_sint32 a_0 36)].
  (* Initializer *)
  Init: 37=Mint_0[(shift_sint32 a_0 37)].
  (* Initializer *)
  Init: 38=Mint_0[(shift_sint32 a_0 38)].
  (* Initializer *)
  Init: 39=Mint_0[(shift_sint32 a_0 39)].
  (* Initializer *)
  Init: 40=Mint_0[(shift_sint32 a_0 40)].
  (* Initializer *)
  Init: 41=Mint_0[(shift_sint32 a_0 41)].
  (* Initializer *)
  Init: 42=Mint_0[(shift_sint32 a_0 42)].
  (* Initializer *)
  Init: 43=Mint_0[(shift_sint32 a_0 43)].
  (* Initializer *)
  Init: 44=Mint_0[(shift_sint32 a_0 44)].
  (* Initializer *)
  Init: 45=Mint_0[(shift_sint32 a_0 45)].
  (* Initializer *)
  Init: 46=Mint_0[(shift_sint32 a_0 46)].
  (* Initializer *)
  Init: 47=Mint_0[(shift_sint32 a_0 47)].
  (* Initializer *)
  Init: 48=Mint_0[(shift_sint32 a_0 48)].
  (* Initializer *)
  Init: 49=Mint_0[(shift_sint32 a_0 49)].
  (* Initializer *)
  Init: forall i_0:int.
        (50<=i_0) -> (i_0<=499) -> (0=Mint_0[(shift_sint32 a_0 i_0)]).
  (* Initializer *)
  Init: forall i_0:int.
        (0<=i_0) -> (i_0<=499)
        -> (0=
            Mint_0[(shift_sint32 (shift_A500_sint32 (global K_g_67) 0) i_0)]).
  (* Heap *)
  Have: (region (base t_0))<=0.
  (* Pre-condition (file tests/wp_typed/array_initialized.c, line 287) in 'simpl' *)
  (* Pre-condition: *)
  Have: forall i_0:int.
        (0<=i_0) -> (i_0<=49) -> (x_0=Mint_0[(shift_sint32 t_0 i_0)]).
  (* tests/wp_typed/array_initialized.c:291: Conditional *)
  If: 0<=x_0
  Then {
    (* tests/wp_typed/array_initialized.c:292: Assignment *)
    Have: 1=simpl_0.
  }
  Else {
    (* tests/wp_typed/array_initialized.c:294: Assignment *)
    Have: 0=simpl_0.
  }
}
Prove: (1=simpl_0)=(0<=Mint_0[(shift_sint32 t_0 i_1)]).

------------------------------------------------------------
