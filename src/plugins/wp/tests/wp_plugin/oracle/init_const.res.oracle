# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_plugin/init_const.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function fA
------------------------------------------------------------

Goal Post-condition 'KO' in 'fA':
Let x_0 = A_0[0].
Let x_1 = A_0[1].
Let x_2 = A_0[2].
Let x_3 = A_0[3].
Let x_4 = x_0+x_1+x_2+x_3.
Assume {
  (* Domain *)
  Type: (is_sint32 x_0) /\ (is_sint32 x_1) /\ (is_sint32 x_2)
        /\ (is_sint32 x_3) /\ (is_sint32 x_4).
}
Prove: 6=x_4.

------------------------------------------------------------
------------------------------------------------------------
  Function fB
------------------------------------------------------------

Goal Post-condition 'OK' in 'fB':
Assume {
  (* Domain *)
  Type: (is_sint32 B_0[3]).
  (* Initializer *)
  Init: 1=B_0[0].
  (* Initializer *)
  Init: 2=B_0[1].
  (* Initializer *)
  Init: 3=B_0[2].
  (* Initializer *)
  Init: forall i_0:int. (3<=i_0) -> (i_0<=3) -> (0=B_0[i_0]).
}
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function fC
------------------------------------------------------------

Goal Post-condition 'KO' in 'fC':
Let x_0 = A_1[3].
Assume {
  (* Domain *)
  Type: (is_sint32 A_0[3]) /\ (is_sint32 x_0).
  (* Initializer *)
  Init: 1=A_0[0].
  (* Initializer *)
  Init: 2=A_0[1].
  (* Initializer *)
  Init: 3=A_0[2].
  (* Initializer *)
  Init: forall i_0:int. (3<=i_0) -> (i_0<=3) -> (0=A_0[i_0]).
}
Prove: 0=x_0.

------------------------------------------------------------
------------------------------------------------------------
  Function fD
------------------------------------------------------------

Goal Post-condition 'OK' in 'fD':
Assume {
  (* Initializer *)
  Init: 1=B_0[0].
  (* Initializer *)
  Init: 2=B_0[1].
  (* Initializer *)
  Init: 3=B_0[2].
  (* Initializer *)
  Init: forall i_0:int. (3<=i_0) -> (i_0<=3) -> (0=B_0[i_0]).
}
Prove: true.

------------------------------------------------------------
